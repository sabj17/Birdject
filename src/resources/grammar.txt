<prog> -> <stmts>, $
<stmts> -> <stmt>, <stmts>
<stmts> -> LAMBDA
<stmt> -> <when-stmt>
<stmt> -> <for-stmt>
<stmt> -> <if-stmt>
<stmt> -> <run>, END
<stmt> -> <var-dcl>
<stmt> -> <func-dcl>
<stmt> -> <class-dcl>
<func-dcl> -> FUNCTION, ID, LPAREN, <params>, RPAREN, <block>
<class-dcl> -> ID, LCURLY, <class-body>, RCURLY
<var-dcl> -> SET, <id>, <dot-ref>, TO, <expr>, END
<if-stmt> -> IF, LPAREN, <expr>, RPAREN, <block>, <else-clause>
<else-clause> -> ELSE, <else>
<else-clause> -> LAMBDA
<else> -> <block>
<else> -> <if-stmt>
<for-stmt> -> FOREACH, <id>, IN, <expr>, <block>
<when-stmt> -> WHEN, LPAREN, <expr>, RPAREN, <block>
<return> -> RETURN, <expr>, END
<break> -> BREAK, END
<run> -> RUN, <func>, LPAREN, <params>, RPAREN
<block> -> LCURLY, <block-body>, RCURLY
<block-body> -> <block-body-part>, <block-body>
<block-body> -> LAMBDA
<block-body-part> -> <for-stmt>
<block-body-part> -> <if-stmt>
<block-body-part> -> <run>, END
<block-body-part> -> <return>
<block-body-part> -> <var-dcl>
<block-body-part> -> <break>
<class-body> -> <class-body-parts>
<class-body-parts> -> <class-body-part>, <class-body-parts>
<class-body-parts> -> LAMBDA
<class-body-part> -> <var-dcl>
<class-body-part> -> <func-dcl>
<class-body-part> -> <class-dcl>
<params> -> <expr>, <multi-params>
<params> -> LAMBDA
<multi-params> -> COMMA, <expr>, <multi-params>
<multi-params> -> LAMBDA
<func> -> <id>, <dot-ref>
<expr> -> <not>, <logic-expr1>
<not> -> NOT
<not> -> LAMBDA
<logic-expr1> -> <logic-expr2>, <or>
<or> -> OR, <logic-expr1>
<or> -> LAMBDA
<logic-expr2> -> <compare-expr1>, <and>
<and> -> AND, <logic-expr2>
<and> -> LAMBDA
<compare-expr1> -> <compare-expr2>, <compare-op1>
<compare-op1> -> EQUALS, <compare-expr1>
<compare-op1> -> NOTEQUALS, <compare-expr1>
<compare-op1> -> LAMBDA
<compare-expr2> -> <arith-expr1>, <compare-op2>
<compare-op2> -> LESS, <compare-expr2>
<compare-op2> -> GREATER, <compare-expr2>
<compare-op2> -> LAMBDA
<arith-expr1> -> <arith-expr2>, <arith-op1>
<arith-op1> -> PLUS, <arith-expr1>
<arith-op1> -> MINUS, <arith-expr1>
<arith-op1> -> LAMBDA
<arith-expr2> -> <arith-expr3>, <arith-op2>
<arith-op2> -> MULT, <arith-expr2>
<arith-op2> -> DIVIDE, <arith-expr2>
<arith-op2> -> MODULO, <arith-expr2>
<arith-op2> -> LAMBDA
<arith-expr3> -> <term>
<arith-expr3> -> LPAREN, <expr>, RPAREN
<arith-expr3> ->  MINUS, <arith-expr3>
<term> -> <id>, <id-operation>
<term> -> <boolean>
<term> -> <val>
<term> -> <string>
<term> -> <run>
<id-operation> -> <dot-ref>
<id-operation> -> LPAREN, <params>, RPAREN
<boolean> -> BOOL
<string> -> STRING
<val> -> INTEGER
<val> -> FLOAT
<id> -> ID, <array-subscript>
<array-subscript> -> LSQUARE, INTEGER, RSQUARE
<array-subscript> -> LAMBDA
<dot-ref> -> DOT, <id>, <dot-ref>
<dot-ref> -> LAMBDA
